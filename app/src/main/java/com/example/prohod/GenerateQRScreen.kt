package com.example.prohod

import android.graphics.Bitmap
import androidx.compose.foundation.Image
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.asImageBitmap
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.TextStyle
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.constraintlayout.compose.ChainStyle
import androidx.constraintlayout.compose.ConstraintLayout
import androidx.navigation.NavHostController
import androidx.navigation.compose.rememberNavController
import com.example.prohod.ui.ButtonBase
import com.example.prohod.ui.ButtonOutlinedBase
import com.example.prohod.ui.HeaderLogo
import com.example.prohod.ui.theme.TextStyleMedium
import com.google.zxing.BarcodeFormat
import com.google.zxing.WriterException
import com.google.zxing.qrcode.QRCodeWriter
import kotlinx.coroutines.delay


@Preview
@Composable
private fun Preview() {
    GenerateQRScreen(navController = rememberNavController())
}

@Composable
fun GenerateQRScreen(navController: NavHostController) {

    Column {
        HeaderLogo()
        Text(
            text = stringResource(id = R.string.generate_qr_header),
            style = TextStyleMedium,
            modifier = Modifier.align(Alignment.CenterHorizontally)
        )
    }

    ConstraintLayout(Modifier.fillMaxSize()) {
        val (qrImage, timerText, timer, buttonGenerate, buttonSendQR) = createRefs()

        var isQRGenerated by remember { mutableStateOf(false) }
        if (!isQRGenerated) {
            ButtonOutlinedBase(
                onClick = {
                    isQRGenerated = true
                },
                modifier = Modifier
                    .constrainAs(buttonGenerate) {
                        centerHorizontallyTo(parent)
                        bottom.linkTo(parent.bottom)
                    }
                    .padding(bottom = 85.dp)
                    .size(width = 210.dp, height = 60.dp),
                text = stringResource(id = R.string.generate_qr)
            )
        } else {
            val qr = encodeAsBitmap("helloworld.com")!!

            val horizontalChain =
                createHorizontalChain(timerText, timer, chainStyle = ChainStyle.Packed)

            Image(
                bitmap = qr.asImageBitmap(),
                contentDescription = "",
                modifier = Modifier.constrainAs(qrImage) {
                    centerHorizontallyTo(parent)
                    centerVerticallyTo(parent)
                })

            Text(text = "Срок действия QR-кода ещё ",
                style = TextStyle(
                    fontSize = 14.sp,
                    fontFamily = FontFamily(Font(R.font.gilroy_regular)),
                    fontWeight = FontWeight(500),
                    color = Color(0xFFFFFFFF),
                    textAlign = TextAlign.Center,
                ),
                modifier = Modifier.constrainAs(timerText) {
                    top.linkTo(qrImage.bottom, 20.dp)
                }
            )

            var t by remember { mutableStateOf(1200) }
            LaunchedEffect(key1 = t) {
                if (t > 0) {
                    delay(1_000)
                    t -= 1
                }
            }
            Text(
                text = if (t / 60 < 10) "0${t / 60}" else "${t / 60}" + ":" + if (t % 60 < 10) "0${t % 60}" else "${t % 60}",
                style = TextStyle(
                    fontSize = 14.sp,
                    fontFamily = FontFamily(Font(R.font.gilroy_regular)),
                    fontWeight = FontWeight(500),
                    color = Color(0xFFFFFFFF),
                    textAlign = TextAlign.Start,
                ),
                modifier = Modifier
                    .width(40.dp)
                    .constrainAs(timer) {
                        top.linkTo(qrImage.bottom, 20.dp)
                    }

            )

            constrain(horizontalChain) {
                start.linkTo(parent.start)
                end.linkTo(parent.end)
            }

            ButtonBase(
                onClick = { /*TODO*/ },
                modifier = Modifier
                    .size(210.dp, 60.dp)
                    .constrainAs(buttonSendQR) {
                        centerHorizontallyTo(parent)
                        bottom.linkTo(parent.bottom, 85.dp)
                    },
                text = "Отправить на почту"
            )

        }

    }
}

fun encodeAsBitmap(str: String): Bitmap? {
    val writer = QRCodeWriter()
    val bitMatrix = try {
        writer.encode(str, BarcodeFormat.QR_CODE, 400, 400)
    } catch (e: WriterException) {
        return null
    }
    val w = bitMatrix.width
    val h = bitMatrix.height
    val pixels = IntArray(w * h)
    for (y in 0 until h) {
        for (x in 0 until w) {
            pixels[y * w + x] =
                if (bitMatrix[x, y]) android.graphics.Color.BLACK else android.graphics.Color.WHITE
        }
    }
    val bitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888)
    bitmap.setPixels(pixels, 0, w, 0, 0, w, h)
    return bitmap
}